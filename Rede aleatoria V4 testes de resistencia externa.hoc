	// *************** Defining cell types

begintemplate dummy_neuron

	public soma, p_dend, nclist
	create soma, p_dend
  objectvar nclist

	proc init() {
		create soma, p_dend

    nclist = new List()

		soma {
			L = 20
			nseg = 1
			diam = 20
			insert hh
		}

		p_dend {
			L = 100
			nseg = 100
			diam = 5
			insert hh
		}


		//Connecting all the sections together
		//-- p_dend to Soma
		connect p_dend(0), soma(0)
		//-- Primary Dendrites to Soma
	}
endtemplate dummy_neuron

// ******************** End of Template ********************

// ******************** Declaring cells

k = 1
num_neuron_neuron = k*k
objref neuron[num_neuron_neuron]
for i = 0, num_neuron_neuron-1 {
	neuron[i] = new dummy_neuron()
}

num_neuron = num_neuron_neuron

// ******************* Setting up stimulus

maxsyn = 1
objectvar syn[maxsyn]

//neuron[0].p_dend syn[0] = new ExpSyn(0)
objref estimulo[num_neuron_neuron]

for i = 0, num_neuron_neuron-1{
		estimulo[i] = new NetStim(0)
		estimulo[i].interval = 1 //ms
	  estimulo[i].number = 10000
		estimulo[i].start = 0 //ms
		estimulo[i].noise = 1
}

syn_counter = 0

for i = 0, num_neuron_neuron-1{
	neuron[i].p_dend syn[syn_counter] = new ExpSyn(0)
	//syn[syn_counter].tau1 =  1 //ms
	//syn[syn_counter].tau2 =  3 //ms
	ns = neuron[i].nclist.append(new NetCon(estimulo[i], syn[syn_counter], -20, 1, 0.035)) //0.03075
	syn_counter += 1
}

// ******************************** extracel ***************************** //

objref seclist[num_neuron_neuron*2]

proc setExtra() {

seclist[0] = new SectionList()
neuron[0].p_dend seclist[0].append()
neuron[0].soma seclist[0].append()

forsec seclist[0]{
		insert extracellular
		xc[0] = 0
		xc[1] = 0

		xg[0] = 0.001	// Conductance at vext[0]
		xg[1] = 0.001	// Conductance at vext[1]

		xraxial[0] = 1e9  // xraxial_value	// MOhm/cm
		xraxial[1] = 1e9  // MOhm/cm
		print xraxial, "aqui"
}
	print "_________________________________________"
	print "Extracellular Mechanism Inserted"
	print "_________________________________________"
}
setExtra()

// **************************** Setting up the Simulation

tstop = 500

// ************************ Run Simulation ******************** //

proc runSim() { local flag, ctr
	ctr = $1
	print "ctr = ", ctr

	//Run the simulation
	run()
}

//Defining values of RATIO_ra_by_re
objref vecRatio

vecRatio = new Vector()
vecRatio.append(10^-4.0)

proc recalcParams() {
	Ra = 183 // Ohm.cm
	Re = Ra/RATIO_ra_by_re	// Ohm.cm
	xraxial_value = Re*1e-6/(PI*((diam/2)^2)*1e-8)	// MOhm/cm

	setExtra()
}

proc runAll() { local i

	for (i=0; i<vecRatio.size(); i=i+1) {
		RATIO_ra_by_re = vecRatio.x[i]
		recalcParams()

		print "\nRATIO_ra_by_re = ", RATIO_ra_by_re, "\n"
		runSim(i)

	}

	print "================================================"
	print "Completed"
	print "================================================"

}


xpanel("Run Simulation")
	xvalue("RATIO_ra_by_re", "RATIO_ra_by_re")
	xlabel("")
	xlabel("Run Simulation")
	xbutton("RunAll","runAll()")
	xlabel("After RunAll runs a graph similar to fig 15 is displayed")
	xlabel("")
xpanel(50, 750)

//save_window_.printfile("Primeiro teste grafico.eps")
